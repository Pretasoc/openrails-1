<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picLogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>